{"version":3,"file":"fetch-1c1a26c5.js","sources":["../../../../node_modules/nuxt/dist/app/composables/fetch.js"],"sourcesContent":["import { computed, reactive, unref } from \"vue\";\nimport { hash } from \"ohash\";\nimport { useRequestFetch } from \"./ssr.js\";\nimport { useAsyncData } from \"./asyncData.js\";\nexport function useFetch(request, arg1, arg2) {\n  const [opts = {}, autoKey] = typeof arg1 === \"string\" ? [{}, arg1] : [arg1, arg2];\n  const _key = opts.key || hash([autoKey, unref(opts.baseURL), typeof request === \"string\" ? request : \"\", unref(opts.params || opts.query)]);\n  if (!_key || typeof _key !== \"string\") {\n    throw new TypeError(\"[nuxt] [useFetch] key must be a string: \" + _key);\n  }\n  if (!request) {\n    throw new Error(\"[nuxt] [useFetch] request is missing.\");\n  }\n  const key = _key === autoKey ? \"$f\" + _key : _key;\n  const _request = computed(() => {\n    let r = request;\n    if (typeof r === \"function\") {\n      r = r();\n    }\n    return unref(r);\n  });\n  if (!opts.baseURL && typeof _request.value === \"string\" && _request.value.startsWith(\"//\")) {\n    throw new Error('[nuxt] [useFetch] the request URL must not start with \"//\".');\n  }\n  const {\n    server,\n    lazy,\n    default: defaultFn,\n    transform,\n    pick,\n    watch,\n    immediate,\n    ...fetchOptions\n  } = opts;\n  const _fetchOptions = reactive({\n    ...fetchOptions,\n    cache: typeof opts.cache === \"boolean\" ? void 0 : opts.cache\n  });\n  const _asyncDataOptions = {\n    server,\n    lazy,\n    default: defaultFn,\n    transform,\n    pick,\n    immediate,\n    watch: watch === false ? [] : [_fetchOptions, _request, ...watch || []]\n  };\n  let controller;\n  const asyncData = useAsyncData(key, () => {\n    controller?.abort?.();\n    controller = typeof AbortController !== \"undefined\" ? new AbortController() : {};\n    const isLocalFetch = typeof _request.value === \"string\" && _request.value.startsWith(\"/\");\n    let _$fetch = opts.$fetch || globalThis.$fetch;\n    if (process.server && !opts.$fetch && isLocalFetch) {\n      _$fetch = useRequestFetch();\n    }\n    return _$fetch(_request.value, { signal: controller.signal, ..._fetchOptions });\n  }, _asyncDataOptions);\n  return asyncData;\n}\nexport function useLazyFetch(request, arg1, arg2) {\n  const [opts, autoKey] = typeof arg1 === \"string\" ? [{}, arg1] : [arg1, arg2];\n  return useFetch(\n    request,\n    {\n      ...opts,\n      lazy: true\n    },\n    // @ts-expect-error we pass an extra argument with the resolved auto-key to prevent another from being injected\n    autoKey\n  );\n}\n"],"names":[],"mappings":";;;;AAIO,SAAS,SAAS,SAAS,MAAM,MAAM;AAC5C,QAAM,CAAC,OAAO,CAAA,GAAI,OAAO,IAAI,OAAO,SAAS,WAAW,CAAC,CAAE,GAAE,IAAI,IAAI,CAAC,MAAM,IAAI;AAChF,QAAM,OAAO,KAAK,OAAO,KAAK,CAAC,SAAS,MAAM,KAAK,OAAO,GAAG,OAAO,YAAY,WAAW,UAAU,IAAI,MAAM,KAAK,UAAU,KAAK,KAAK,CAAC,CAAC;AAC1I,MAAI,CAAC,QAAQ,OAAO,SAAS,UAAU;AACrC,UAAM,IAAI,UAAU,6CAA6C,IAAI;AAAA,EACtE;AACD,MAAI,CAAC,SAAS;AACZ,UAAM,IAAI,MAAM,uCAAuC;AAAA,EACxD;AACD,QAAM,MAAM,SAAS,UAAU,OAAO,OAAO;AAC7C,QAAM,WAAW,SAAS,MAAM;AAC9B,QAAI,IAAI;AACR,QAAI,OAAO,MAAM,YAAY;AAC3B,UAAI,EAAC;AAAA,IACN;AACD,WAAO,MAAM,CAAC;AAAA,EAClB,CAAG;AACD,MAAI,CAAC,KAAK,WAAW,OAAO,SAAS,UAAU,YAAY,SAAS,MAAM,WAAW,IAAI,GAAG;AAC1F,UAAM,IAAI,MAAM,6DAA6D;AAAA,EAC9E;AACD,QAAM;AAAA,IACJ;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA;AAAA,IACA,GAAG;AAAA,EACJ,IAAG;AACJ,QAAM,gBAAgB,SAAS;AAAA,IAC7B,GAAG;AAAA,IACH,OAAO,OAAO,KAAK,UAAU,YAAY,SAAS,KAAK;AAAA,EAC3D,CAAG;AACD,QAAM,oBAAoB;AAAA,IACxB;AAAA,IACA;AAAA,IACA,SAAS;AAAA,IACT;AAAA,IACA;AAAA,IACA;AAAA,IACA,OAAO,UAAU,QAAQ,CAAE,IAAG,CAAC,eAAe,UAAU,GAAG,SAAS,EAAE;AAAA,EAC1E;AACE,MAAI;AACJ,QAAM,YAAY,aAAa,KAAK,MAAM;;AACxC,mDAAY,UAAZ;AACA,iBAAa,OAAO,oBAAoB,cAAc,IAAI,gBAAe,IAAK,CAAA;AAC9E,UAAM,eAAe,OAAO,SAAS,UAAU,YAAY,SAAS,MAAM,WAAW,GAAG;AACxF,QAAI,UAAU,KAAK,UAAU,WAAW;AACxC,QAAsB,CAAC,KAAK,UAAU,cAAc;AAClD,gBAAU,gBAAe;AAAA,IAC1B;AACD,WAAO,QAAQ,SAAS,OAAO,EAAE,QAAQ,WAAW,QAAQ,GAAG,cAAa,CAAE;AAAA,EAC/E,GAAE,iBAAiB;AACpB,SAAO;AACT;","x_google_ignoreList":[0]}