import "./chunk-JLSDPW4D.js";
import "./chunk-MNWBZQKJ.js";
import {
  defineAsyncComponent
} from "./chunk-3Q27KRJ5.js";
import {
  reactive
} from "./chunk-BOVKDABU.js";
import "./chunk-V6R5RJCE.js";
import {
  __privateAdd,
  __privateGet,
  __privateSet
} from "./chunk-YSQOLFOS.js";

// node_modules/vue-3-breadcrumbs/dist/esm/breadcrumbs.js
var _vueApp, _router;
var Breadcrumbs = class {
  constructor(vueApp) {
    __privateAdd(this, _vueApp, void 0);
    __privateAdd(this, _router, void 0);
    __privateSet(this, _vueApp, vueApp);
    __privateSet(this, _router, vueApp.config.globalProperties.$router);
    this.value = reactive([]);
  }
  init() {
    __privateGet(this, _router).afterEach((route, from, failure) => {
      if (failure || route.path === from.path && from.matched.length)
        return false;
      this.setBreadcrumbsByRoute(route);
    });
  }
  // Creates and sets breadcrumbs chain for route
  setBreadcrumbsByRoute(route) {
    if (!route)
      return false;
    let arPath = route.path.replace(/\/$/, "").split("/");
    let iterablePath = "";
    let spliced = false;
    arPath.forEach((item, i) => {
      var _a;
      iterablePath += i === 1 ? item : "/" + item;
      let isCurrentCrumb = i + 1 >= arPath.length;
      if (((_a = this.value[i]) == null ? void 0 : _a._path) === iterablePath) {
        if (isCurrentCrumb)
          this.value.splice(i + 1, this.value.length);
        this.value[i].current = i + 1 >= arPath.length;
        return false;
      } else if (!spliced && i < this.value.length) {
        this.value.splice(i, this.value.length);
        spliced = true;
      }
      const breadcrumb = this.createBreadcrumb(iterablePath, isCurrentCrumb);
      if (!breadcrumb)
        return false;
      this.value.push(breadcrumb);
    });
  }
  // Resolves route meta by path and creates breadcrumb object
  createBreadcrumb(path, isCurrent = false) {
    var _a;
    if (!path)
      return false;
    let crumbRoute = __privateGet(this, _router).resolve(path);
    let breadcrumb = (_a = crumbRoute.meta) == null ? void 0 : _a.breadcrumb;
    if (typeof breadcrumb === "function")
      breadcrumb = breadcrumb.call(null, crumbRoute, __privateGet(this, _vueApp));
    if (!breadcrumb)
      return false;
    let isBcObject = typeof breadcrumb === "object";
    return {
      label: isBcObject ? breadcrumb.label : breadcrumb,
      link: isBcObject && breadcrumb.link ? breadcrumb.link : crumbRoute.path,
      current: isCurrent,
      _path: path
    };
  }
};
_vueApp = new WeakMap();
_router = new WeakMap();
var breadcrumbs = {
  install: (app, options) => {
    app.config.globalProperties.$breadcrumbs = new Breadcrumbs(app);
    app.config.globalProperties.$breadcrumbs.init();
    if (options == null ? void 0 : options.includeComponent) {
      const AmBreadcrumbs = defineAsyncComponent(() => import("./AmBreadcrumbs-04351cc9-IQBNTH3V.js"));
      app.component("AmBreadcrumbs", AmBreadcrumbs);
    }
  }
};
export {
  breadcrumbs as default
};
//# sourceMappingURL=vue-3-breadcrumbs.js.map
